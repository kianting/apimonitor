<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:objectstore="http://www.mulesoft.org/schema/mule/objectstore" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:email="http://www.mulesoft.org/schema/mule/email"
	xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns:slack="http://www.mulesoft.org/schema/mule/slack" xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:tcp="http://www.mulesoft.org/schema/mule/tcp" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/email http://www.mulesoft.org/schema/mule/email/current/mule-email.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/tcp http://www.mulesoft.org/schema/mule/tcp/current/mule-tcp.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/slack http://www.mulesoft.org/schema/mule/slack/current/mule-slack.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/objectstore http://www.mulesoft.org/schema/mule/objectstore/current/mule-objectstore.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd">
	<http:listener-config name="httpListenerConfig"
		host="0.0.0.0" port="${http.port}" doc:name="HTTP Listener Configuration" />
	<apikit:config name="apiConfig" raml="api.raml"
		consoleEnabled="false" doc:name="Router" />
	<context:property-placeholder location="api.properties" />
	<smtp:connector name="SMTP" contentType="text/html"
		validateConnections="true" doc:name="SMTP" />
	<slack:oauth2-config name="Slack__OAuth2_Configuration"
		consumerKey="156524437059.230636051270" consumerSecret="aac06c29d4acd6b4f97d64174dc6bd86"
		doc:name="Slack: OAuth2 Configuration">
		<slack:oauth-callback-config domain="integreatest.slack.com"
			localPort="9091" path="/messages/C4LHES69Y/" defaultAccessTokenId="wCq1k1zhp1G2plDDWcXXilCK" />
	</slack:oauth2-config>
	<tcp:connector name="TCP" validateConnections="false"
		receiveBacklog="0" clientSoTimeout="10000" serverSoTimeout="10000"
		socketSoLinger="0" doc:name="TCP">
		<tcp:eof-protocol payloadOnly="true"
			rethrowExceptionOnRead="true" />
	</tcp:connector>
	<slack:token-config name="Slack__Token_Configuration"
		accessToken="wCq1k1zhp1G2plDDWcXXilCK" doc:name="Slack: Token Configuration" />
	<http:request-config name="HTTP_Request_Configuration"
		doc:name="HTTP Request Configuration" />
	<objectstore:config name="ObjectStore__Configuration" doc:name="ObjectStore: Configuration" objectStore-ref="_defaultUserObjectStore"
		persistent="true" entryTtl="0" expirationInterval="0" maxEntries="0" />
    <vm:connector name="VM" validateConnections="true" doc:name="VM"/>

	<flow name="api-main">
		<http:listener config-ref="httpListenerConfig" path="/api/*"
			doc:name="HTTP" />
		<apikit:router config-ref="apiConfig" doc:name="APIkit Router" />
		<exception-strategy ref="apiKitGlobalExceptionMapping"
			doc:name="Reference Exception Strategy" />
	</flow>
	<flow name="api-console">
		<http:listener config-ref="httpListenerConfig" path="/console/*"
			doc:name="HTTP" />
		<apikit:console config-ref="apiConfig" doc:name="APIkit Console" />
	</flow>
	<flow name="post:/ping:application/json:apiConfig">
		<byte-array-to-object-transformer
			doc:name="Byte Array to Object" />
		<scripting:component doc:name="Convert Payload to HasMap">
			<scripting:script engine="Groovy"><![CDATA[import groovy.json.JsonSlurperClassic 

def jsonParse(def json) {
    new groovy.json.JsonSlurperClassic().parseText(json)
}

if (payload instanceof String){
   payload = jsonParse(payload)
}

return payload]]></scripting:script>
		</scripting:component>
        <enricher doc:name="set flowVars previousPingResult">
            <objectstore:retrieve config-ref="ObjectStore__Configuration" key="lastPing" defaultValue-ref="#[&quot;EMPTY&quot;]" targetProperty="#[flowVars['previousPingResult']]" doc:name="Retrieve lastPing"/>
            <enrich source="" target="#[flowVars['previousPingResult']]"/>
        </enricher>
		<collection-splitter doc:name="Collection Splitter" />
		<enricher doc:name="set flowVars.isUp">
			<scripting:component doc:name="Ping The URL">
				<scripting:script engine="Groovy"><![CDATA[import org.kian.mulesoft.*;
boolean isUp = false;
 
if (payload?.url != null){
   if(payload.url.split(':')[0].equalsIgnoreCase("http")){
      isUp = (new HttpClient()).ping(payload.url)
   }else if(payload.url.split(':')[0].equalsIgnoreCase("https")){
      isUp = (new HttpsClient()).ping(payload.url)
   }
}
return isUp;]]></scripting:script>
			</scripting:component>
			<enrich source="" target="#[flowVars['isUp']]" />
		</enricher>
		<scripting:component doc:name="Append New Data to Payload">
			<scripting:script engine="Groovy"><![CDATA[payload.put("isUp", flowVars.isUp)
payload.put("timeStamp", (new Date()))
return payload]]></scripting:script>
		</scripting:component>
        <choice tracking:enable-default-events="true" doc:name="Was there a previous ping attempt">
            <when expression="#[(flowVars['previousPingResult'] instanceof String) == false]">
                <flow-ref name="sendOnlyIfIntervalExpired" doc:name="sendOnlyIfIntervalExpired"/>
            </when>
            <otherwise>
                <flow-ref name="sendNotificaiton" doc:name="sendNotificaiton"/>
            </otherwise>
        </choice>

		<collection-aggregator failOnTimeout="true"
			doc:name="Collection Aggregator" />
        <enricher doc:name="Prepare Object Store Structure">
            <scripting:component doc:name="Create New Ping Result">
                <scripting:script engine="Groovy"><![CDATA[def objectStoreStuct = [:]
println payload.getClass().toString()
for(int i=0; i < payload.size(); i++)
{
   objectStoreStuct.put(payload[i].name,payload[i])
}

return objectStoreStuct]]></scripting:script>
            </scripting:component>
            <enrich source="" target="#[flowVars['newPingResult']]"/>
        </enricher>
        <objectstore:store config-ref="ObjectStore__Configuration" key="lastPing" value-ref="#[flowVars['newPingResult']]" overwrite="true" doc:name="Store New Ping"/>
        <dw:transform-message doc:name="Prepare Response Payload">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
payload
]]></dw:set-payload>
        </dw:transform-message>
        <logger message="#[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger"/>
        <logger message="Finish processing !!!" level="INFO" doc:name="Logger"/>

		<!-- <tcp:outbound-endpoint exchange-pattern="request-response" address="#[payload.url]" 
			connector-ref="TCP" responseTimeout="10000" doc:name="TCP"/> -->
		<!-- <slack:post-message config-ref="Slack__OAuth2_Configuration" channelId="#general" 
			message="Testing" accessTokenId="wCq1k1zhp1G2plDDWcXXilCK" doc:name="Slack"/> -->

	</flow>
    <flow name="sendEmail">
        <vm:inbound-endpoint exchange-pattern="one-way" path="email" connector-ref="VM" doc:name="VM"/>
        <set-property propertyName="#[&quot;subject&quot;]" value="#[&quot;[API Monitor]&quot;] #[payload.name] #[&quot; is down &quot;]" doc:name="setEmailSubject"/>
        <set-property propertyName="#[&quot;body&quot;]" value="#[payload]" mimeType="text/html" doc:name="setEmailBody"/>
        <enricher doc:name="Send Notification Email">
            <smtp:outbound-endpoint host="${smtp.host}" port="${smtp.port}" user="${smtp.user}" password="${smtp.password}" connector-ref="SMTP" to="${smtp.to}" from="${smtp.from}" subject="API Monitor" cc="${smtp.cc}" bcc="${smtp.bcc}" responseTimeout="10000" mimeType="text/html" doc:name="SMTP">
                <property key="mail.smtp.starttls.enable" value="true"/>
            </smtp:outbound-endpoint>
            <enrich source="" target="#[flowVars['smptResponse']]"/>
        </enricher>
    </flow>
    <sub-flow name="sendNotificaiton">
        <choice doc:name="isUp">
            <when expression="#[flowVars.isUp == false]">
                <enricher doc:name="Message Enricher">
                    <vm:outbound-endpoint exchange-pattern="one-way" path="email" connector-ref="VM" doc:name="VM"/>
                    <enrich source="" target="#[flowVars['email']]"/>
                </enricher>

            </when>
            <otherwise>
                <logger message="The Folloing site is Up : #[payload]" level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
    </sub-flow>
    <sub-flow name="sendOnlyIfIntervalExpired">
        <enricher doc:name="set isIntervalExpired">
            <scripting:component doc:name="get isIntervalExpired">
                <scripting:script engine="Groovy"><![CDATA[def isIntervalExpired = false
def lastPingPayload = [:] 

try{
   lastPingPayload = flowVars['previousPingResult'].get(payload.name)
   def elapsedTime = 0

   use(groovy.time.TimeCategory) {
       def duration = (new Date()) - lastPingPayload.timeStamp
       elapsedTime = (duration.days * 24 * 60 * 60) + (duration.hours * 60 * 60) + (duration.minutes * 60) + duration.seconds
   }
   
   def notificationInterval = (lastPingPayload.notificaitonInterval.hour * 60 * 60) + (lastPingPayload.notificaitonInterval.minutes * 60) + lastPingPayload.notificaitonInterval.seconds
   if (elapsedTime > notificationInterval){
     isIntervalExpired = true
   }
} catch (Exception ex){
  ex.printStackTrace()
}

return isIntervalExpired]]></scripting:script>
            </scripting:component>
            <enrich source="" target="#[flowVars['isIntervalExpired']]"/>
        </enricher>
        <choice tracking:enable-default-events="true" doc:name="isIntervalExpired">
            <when expression="#[flowVars.isIntervalExpired]">
                <flow-ref name="sendNotificaiton" doc:name="sendNotificaiton"/>
            </when>
            <otherwise>
                <logger message="Interval Has not Epired No notificaitons would be sent for #[payload]" level="INFO" doc:name="Logger"/>
                <scripting:component doc:name="Update Payload to Previous Time Stamp">
                    <scripting:script engine="Groovy"><![CDATA[try{
  def lastPingPayload = flowVars['previousPingResult'].get(payload.name)
  payload.put("timeStamp", lastPingPayload.timeStamp)
}catch(Exception ex){
   ex.printStackTrace()
}
return payload]]></scripting:script>
                </scripting:component>
            </otherwise>
        </choice>
    </sub-flow>

	<apikit:mapping-exception-strategy
		name="apiKitGlobalExceptionMapping">
		<apikit:mapping statusCode="404">
			<apikit:exception
				value="org.mule.module.apikit.exception.NotFoundException" />
			<set-property propertyName="Content-Type" value="application/json"
				doc:name="Property" />
			<set-payload
				value="{ &quot;message&quot;: &quot;Resource not found&quot; }"
				doc:name="Set Payload" />
		</apikit:mapping>
		<apikit:mapping statusCode="405">
			<apikit:exception
				value="org.mule.module.apikit.exception.MethodNotAllowedException" />
			<set-property propertyName="Content-Type" value="application/json"
				doc:name="Property" />
			<set-payload
				value="{ &quot;message&quot;: &quot;Method not allowed&quot; }"
				doc:name="Set Payload" />
		</apikit:mapping>
		<apikit:mapping statusCode="415">
			<apikit:exception
				value="org.mule.module.apikit.exception.UnsupportedMediaTypeException" />
			<set-property propertyName="Content-Type" value="application/json"
				doc:name="Property" />
			<set-payload
				value="{ &quot;message&quot;: &quot;Unsupported media type&quot; }"
				doc:name="Set Payload" />
		</apikit:mapping>
		<apikit:mapping statusCode="406">
			<apikit:exception
				value="org.mule.module.apikit.exception.NotAcceptableException" />
			<set-property propertyName="Content-Type" value="application/json"
				doc:name="Property" />
			<set-payload value="{ &quot;message&quot;: &quot;Not acceptable&quot; }"
				doc:name="Set Payload" />
		</apikit:mapping>
		<apikit:mapping statusCode="400">
			<apikit:exception
				value="org.mule.module.apikit.exception.BadRequestException" />
			<set-property propertyName="Content-Type" value="application/json"
				doc:name="Property" />
			<set-payload value="{ &quot;message&quot;: &quot;Bad request&quot; }"
				doc:name="Set Payload" />
		</apikit:mapping>
	</apikit:mapping-exception-strategy>
</mule>
